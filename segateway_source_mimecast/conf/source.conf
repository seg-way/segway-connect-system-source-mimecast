template t_segway_msg_only {
    template("$MSG");
};
template t_segway_rawmsg_only {
    template("$RAWMSG");
};

source s_main{
    channel {
        source {
            python(
                class("segateway_source_mimecast.LogSource")
                flags(
                    assume-utf8,
                )
                log-iw-size(1000)
                tags(
                    'transport:eventhub',
                    'structured:true',
                    'vendor:mimecase',
                    'product:cloudgateway'
                )
            );
        };
        parser {
            json-parser (prefix(".Vendor."));
        };
        rewrite {
            set('', value('HOST'));
            set('', value('FROM_HOST'));
            set('t_segway_rawmsg_only', value('.segway.msgtemplate'));

        };
        if ("${.Vendor.time}" ne "") {
            parser {
                #2023-06-27T20:59:05.188066373Z
                date-parser(
                    format(
                        '%FT%T.%f%z',
                        '%FT%T%z'
                    )
                    template("${.Vendor.time}")
                );
            };
            rewrite {
                set-tag("parsedtime");
                set('event', value('.ecs.labels.timesource'));
            };
        } else {
            parser {
                #2023-06-27T20:59:05.188066373Z
                date-parser(
                    format(
                        '%FT%T.%f%z',
                        '%FT%T%z'
                    )
                    template("${.internal.enqueued_time}")
                );
            };
            rewrite {
                set-tag("parsedtime");
                set('enqueue', value('.ecs.labels.timesource'));
            };
        };
        rewrite {
            set('${S_ISODATE}', value('.ecs.@timestamp'));
            set('`SEGWAY_SOURCE_VENDOR`', value('.ecs.labels.vendor'));
            set('`SEGWAY_SOURCE_PRODUCT`', value('.ecs.labels.product'));
            set('8.8', value('.ecs.ecs.version'));
        };
        if {
            parser {
                app-parser(topic(segway-`SEGWAY_APP_PARSER`));
            };
        };
    };
};

